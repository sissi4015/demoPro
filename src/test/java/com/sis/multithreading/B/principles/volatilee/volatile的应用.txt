《Java并发编程的艺术》

第二章 Java并发机制的底层实现原理

2.1 volatile的应用

重点1：定义：如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的
        volatile在多处理器开发中保证了共享变量的“可见性”。

重点2：优点：volatile的使用和执行成本比synchronized低，因为volatile不会引起线程上下文切换和调度

重点3：原理：1）Lock前缀指令会引起处理器缓存回写到内存
            2）一个处理器的缓存回写到内存会导致其他处理器的缓存无效

重点4：volatile的使用优化：
        例：JDK7的并发包新增了一个队列集合类LinkedTransferQueue
        通过增加字节到64位，保证队列头和队列尾不会被缓存到同一个高速缓存行，
        （很多处理器的L1,L2或L3缓存的高速缓存行是64个字节，不支持部分填充缓存行）
        避免了入队和出队时，队列头和队列尾的互相锁定
